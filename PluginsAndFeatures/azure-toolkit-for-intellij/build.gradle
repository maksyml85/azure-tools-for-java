plugins {
    id 'java-library'
    id "org.jetbrains.intellij" version "1.5.2"
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
    id "de.undercouch.download" version "4.1.1"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "io.freefair.aspectj.post-compile-weaving" version "6.4.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

ext {
    azureToolkitVersion = "0.19.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion
    ajc {
        enabled = false
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = javaVersion
    ajc {
        enabled = false
    }
}

//import com.microsoft.azuretools.plugins.BundleBuildIDEAPlugin
import org.apache.tools.ant.filters.*

processResources {
    filesMatching('**/ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

group 'com.microsoft.azuretools'
apply plugin: 'java'
apply plugin: 'java-library'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

//apply plugin: 'checkstyle'
//
//checkstyle {
//    toolVersion = '8.30'
//    configFile = new File('config/checkstyle/checkstyle.xml')
//    showViolations = false
//}

intellij {
    pluginName = 'azure-toolkit-for-intellij'
    version = intellij_version
    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    plugins = ['java', 'maven', 'maven-model', 'gradle', dep_plugins, "properties", 'terminal', 'gradle-java']
    downloadSources = Boolean.valueOf(sources)
}


// disable runIde tasks in subprojects to prevent starting-up multiple ide.
gradle.taskGraph.whenReady { graph ->
    def hasRootRunTask = graph.hasTask(':runIde')

    if (hasRootRunTask) {
        graph.getAllTasks().each { task ->
            // look for *:runIde
            def subRunTask = (task.path =~ /:.+:runIde/)
            if (subRunTask) {
                println "TRACER skipping ${task.path} because ':runIde' was specified"
                task.enabled = false
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.freefair.aspectj.post-compile-weaving'
    apply plugin: 'io.spring.dependency-management'
    ext {
        azureToolkitVersion = "0.19.0"
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'com.microsoft.azuretools'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version = intellij_version
        updateSinceUntilBuild = false
        downloadSources = Boolean.valueOf(sources)
    }

    dependencyManagement {
        imports {
            mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
            mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
        }
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        api 'com.microsoft.azure:azure-toolkit-common-lib'
        aspect 'com.microsoft.azure:azure-toolkit-common-lib'
        compileOnly 'org.jetbrains:annotations'
    }

    buildSearchableOptions.onlyIf { false }
}

allprojects {
    apply plugin: 'java'

    tasks.withType(Copy).all {
        duplicatesStrategy 'INCLUDE'
    }
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        kotlin.srcDirs 'src/main/kotlin'
        resources {
            srcDir 'src/main/resources'
            exclude 'bundle/**'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        kotlin.srcDirs 'src/test/kotlin'
        resources {
            srcDir 'src/test/resources'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations.all {
    exclude module: 'slf4j-api'
    exclude module: 'log4j'
    exclude module: 'stax-api'
    exclude module: 'groovy-xml'
    exclude module: 'groovy-templates'
}

dependencyManagement {
    imports {
        mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
        mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
    }
}

dependencies {
    api project(':azure-intellij-plugin-lib')
    api project(':azure-sdk-reference-book')
    api project(':azure-intellij-resource-connector-lib')
    api project(':azure-intellij-resource-connector-aad')
    api project(':azure-intellij-plugin-vm')
    api project(':azure-intellij-plugin-springcloud')
    api project(':azure-intellij-plugin-storage')
    api project(':azure-intellij-plugin-redis')
    api project(':azure-intellij-plugin-service-explorer')
    api project(':azure-intellij-plugin-database')
    api project(':azure-intellij-plugin-appservice')
    api project(':azure-intellij-plugin-arm')
    api project(':azure-intellij-plugin-containerregistry')
    api 'com.microsoft.azure:azure-toolkit-ide-appservice-lib'
    api 'com.microsoft.azure:azure-toolkit-applicationinsights-lib'
    api 'com.microsoft.azure:azure-toolkit-storage-lib'
    api 'com.microsoft.azure:azure-client-authentication'
    aspect "com.microsoft.azure:azure-toolkit-common-lib", {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
    api 'com.microsoft.azure:azure-client-runtime', {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
    api 'commons-io:commons-io'
    api 'org.apache.commons:commons-lang3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    api 'com.microsoft.azuretools:azuretools-core:3.63.0', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    api 'com.microsoft.azuretools:azure-explorer-common:3.63.0', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    api 'com.microsoft.azuretools:hdinsight-node-common:3.63.0', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }

    api 'com.spotify:docker-client:8.16.0'
    api group: 'org.dom4j', name: 'dom4j', {
        exclude group: "javax.xml.stream", module: "stax-api"
        exclude group: "xpp3", module: "xpp3"
        exclude group: "pull-parser", module: "pull-parser"
        exclude group: "net.java.dev.msv", module: "xsdlib"
    }
    api group: 'jaxen', name: 'jaxen', version: '1.2.0'

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0")

    testImplementation 'io.cucumber:cucumber-java:7.0.0'
    testImplementation 'io.cucumber:cucumber-junit:7.0.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'junit:junit'
    testImplementation 'org.mockito:mockito-core'

    testImplementation 'org.powermock:powermock-module-junit4:1.7.0RC4'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC4'
    testImplementation 'javax.servlet:javax.servlet-api:4.0.1'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }
}

buildSearchableOptions.onlyIf { false }

// buildPlugin.dependsOn test

defaultTasks 'buildPlugin'

wrapper() {
    gradleVersion = '7.4.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

//apply plugin: BundleBuildIDEAPlugin

//installIdea.dependsOn buildPlugin
//installIdea.dependsOn checkstyleMain

patchPluginXml {
    sinceBuild = patchPluginXmlSinceBuild
}